<?php
    
    //RENAME ME: index.php
    
    // STANDALONE USE OF EXALIDRAW WITH BACKEND (PHP)    
    // SCHEME:    https://myhostname/pathto/index.php?name=json.excalidraw (or image.png)

    $docRt   = $_SERVER['DOCUMENT_ROOT'];        
    
    $dir = substr( __DIR__, strlen($docRt) );    //Script Folder from DOCUMENT ROOT
    $dir = preg_replace('/[\\\\\\/]+/', '/', '/' . $dir . '/' );
    
    $library  = 'libray.excalidrawlib';   //Library Folder
    $asset    = $dir . 'Excalidraw/';     //Excali Assets Folder (locale & fonts)
    $pathFile = __DIR__ . '/' ;           //Files Folder (for json & image)

    
    //***********  POST ***********//
    
    $do   = get('do','') .  post('do','');  
    $mode = post('mode','');                     //mode:  json | image (save)
    $name = get('name','') . post('name','');
    $path = $pathFile . $name;


    //***********  AJAX SWITCH ***********//
    
     switch($do) {
       
        case 'get':                                   //Get array of Libray and Scene at excalidraw Load
            echo getLibraryAndScene($library,$path);
            exit; break;
       
        case 'save':                                  //Save Scene | Export Image
            if($mode == 'scene') SaveScene($name);
            else                 SaveImage($name);
            exit; break;
     }
    
    
    //***********  FILE GET ***********//
   
    //Send to Client:  Library file & Scene
    function getLibraryAndScene($lib,$path){   
   
       $Exist   = file_exists($lib);
       $library = $Exist ? file_get_contents($lib) : '';'';
       
       $ext  = pathinfo($path,4) ?? ''; 
       $type = ''; $content = '';
       
       $Exist = file_exists($path);
       if( !empty($path) && !empty($ext) && $Exist ) {
          $file    = file_get_contents($path);
          $isImg   = in_array($ext, ['png','svg']); 
          $type    = $isImg ? 'image' : 'scene';
          $content = $isImg ? base64_encode($file) : $file;
       }
          $scene   = [ 'type' => $type, 'ext' => $ext, 'content' => $content ];
          $data    = [ 'library' => $library, 'scene' => $scene ];
           return json_encode( $data );
    }
    
    
    // ***********  FILE SAVE ***********//    

    // SAVE SCENE TO JSON
    function SaveScene($name){
        global $pathFile;
       
       $data = post('data','');
       $name = pathinfo($name,8);
       $file = $pathFile . $name . '.excalidraw';
       
       $r = file_put_contents($file,$data);
       
       $msg = !!$r ? 'saved' : 'error';
        echo json_encode($msg);         
    }

    // SAVE IMAGE TO PNG (WITH JSON EMBEDDED)
    // Excali can embed Scene in PNG (compressed json) 
    // if exportEmbedScene = true (this allow to edit again Scene)
    function SaveImage($name){
        global $pathFile;
       
       $data = $_FILES['data']['tmp_name'];      
       $type = $_FILES['data']['type'];       // type: 'image/png' 
       $name = pathinfo($name,8);
      
       $ext  = explode('/',$type)[1];             
       $file = $pathFile . $name . '.' . $ext ;
       
       $r = move_uploaded_file( $data, $file );
       $msg = !!$r ? 'saved' : 'error';
        echo json_encode($msg);          
    }
    
    
    // ***********  AJAX ***********//

    function get($id,$def) {return isset($_GET[$id])?$_GET[$id]:$def;}
    function post($id,$def){return isset($_POST[$id])?$_POST[$id]:$def;}  

?>
<!DOCTYPE html>
<html lang="fr" >
  
  <head>
    <meta charset="UTF-8">
    <title>Excalidraw</title>
    
    <script src="https://unpkg.com/react@18.2.0/umd/react.production.min.js"></script>
    <script src="https://unpkg.com/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
   
    <!-- Path to Excalid assets (locale & fonts) -->
    <!-- <script> EXCALIDRAW_ASSET_PATH = '<?=$asset?>'; </script> -->
    
    <script src="https://unpkg.com/@excalidraw/excalidraw/dist/excalidraw.production.min.js"></script>
    
  </head>

  <body style="margin:0;">

    <div class="container">
      <div id="excali"></div>
    </div>

     <script>
     
        var excalidrawAPI, setExcalidrawAPI;
     
        const dir = '<?=$dir?>';           //app's url
        let name = '<?=$name?>';           //document's name
            name = name == '' ? 'excali' : name;
        
        const data = {do:'get', name:name};
              
               //Load Backend JSON or PNG SCENE File
               FETCH( dir, data, e => LOADCB(e) );
         

       // **************************** INIT ****************************
        
        //Get JSON or PNG SCENE File from Backend
        function LOADCB(e){ 
                  
           const library = e.library == '' ? '' : JSON.parse(e.library);
          
           const SCENE = e.scene;
           const type  = SCENE.type;
           const ext   = SCENE.ext;
           let scene    = SCENE.content;                     

           //Open SCENE from PNG medata
           if( type == 'image' ) {
           
               const blob = b64ToBlob( scene, ext );        //base64 png data -> blob
                
               ExcalidrawLib.loadFromBlob(blob)              //extract scene from png metadata 
               .then( scene => INIT( library, scene ) );
           }
           //Open SCENE from JSON file.excalidraw
           else {
           
               if( type == 'scene' ) scene = JSON.parse(scene); 
               else scene = {};                              //no Scene, just open Excalidraw empty
               
               INIT( library, scene );
           }
        }
        
        //Start EXCALIDRAW with custom LIBRARY & ELEMENTS
        function INIT( library, scene ){
         
           const options =  {     
              langCode: 'fr-FR',
              name: name,
              ref: (api) => { setExcalidrawAPI(api); }, 
              initialData: {
                  libraryItems:    library.libraryItems,
                  elements:        scene.elements,
                  files:           scene.files,
                  appState:        { ...scene.appState, ...appStateDefault() },
              }
           }
         
           const App = () => {
   
             [excalidrawAPI, setExcalidrawAPI] = React.useState(null);
    
              return React.createElement(
                        React.Fragment, null,
                          React.createElement( 'div', { style: { height: "100vh" } },
                            React.createElement( ExcalidrawLib.Excalidraw, options, 
                               React.createElement( ExcalidrawLib.MainMenu, {}, MainMenu() ), 
                            ),   
                          ),
                        );
           };

           const excali = document.getElementById('excali'); 
           const root = ReactDOM.createRoot(excali);
                  root.render(React.createElement(App));

        }

       // **************************** UI ****************************

        //MainMenu ITEMS:  
        //Replace Export & Save to FRONTEND -> to BACKEND (on server)
        function MainMenu(){
           
           const pathOpen   = 'm9.257 6.351.183.183H15.819c.34 0 .727.182 1.051.506.323.323.505.708.505 1.05v5.819c0 .316-.183.7-.52 1.035-.337.338-.723.522-1.037.522H4.182c-.352 0-.74-.181-1.058-.5-.318-.318-.499-.705-.499-1.057V5.182c0-.351.181-.736.5-1.054.32-.321.71-.503 1.057-.503H6.53l2.726 2.726Z';
           const pathExport = 'M3.333 14.167v1.666c0 .92.747 1.667 1.667 1.667h10c.92 0 1.667-.746 1.667-1.667v-1.666M5.833 9.167 10 13.333l4.167-4.166M10 3.333v10';
           const pathSave   = 'M15 8h.01 M12 20h-5a3 3 0 0 1 -3 -3v-10a3 3 0 0 1 3 -3h10a3 3 0 0 1 3 3v5 M4 15l4 -4c.928 -.893 2.072 -.893 3 0l4 4 M14 14l1 -1c.617 -.593 1.328 -.793 2.009 -.598 M19 16v6 M22 19l-3 3l-3 -3'; 
        
           const iconFill = { fill:'none', stroke:'currentColor', 'stroke-width':'1.25', 'stroke-linecap':'round', 'stroke-linejoin':'round' };
           const iconVB20 = { viewBox:'0 0 20 20', ...iconFill };
           const iconVB24 = { viewBox:'0 0 24 24', ...iconFill };
                 
           const iconOpen   = React.createElement( 'svg', iconVB20, React.createElement( 'path', { d:pathOpen   } ));
           const iconExport = React.createElement( 'svg', iconVB20, React.createElement( 'path', { d:pathExport } ));
           const iconSave   = React.createElement( 'svg', iconVB24, React.createElement( 'path', { d:pathSave   } ));             
            
           const Menu = [
                    React.createElement( ExcalidrawLib.MainMenu.DefaultItems.LoadScene),
                  //React.createElement( ExcalidrawLib.MainMenu.DefaultItems.Export),
                    React.createElement( ExcalidrawLib.MainMenu.Item, { icon: iconExport, onClick: () => SAVE() }, 'Save to Server'),
                  //React.createElement( ExcalidrawLib.MainMenu.DefaultItems.SaveAsImage),
                    React.createElement( ExcalidrawLib.MainMenu.Item, { icon: iconSave,   onClick: () => EXPORT()   }, 'Export image to Server'),
                    React.createElement( ExcalidrawLib.MainMenu.DefaultItems.ClearCanvas),
                    React.createElement( ExcalidrawLib.MainMenu.Separator),
                    React.createElement( ExcalidrawLib.MainMenu.DefaultItems.ToggleTheme),
                    React.createElement( ExcalidrawLib.MainMenu.DefaultItems.ChangeCanvasBackground),
                  ]
                  
           return Menu;
        }
        
        //Default SHAPE properties
        function appStateDefault(){
           return {
                 currentItemStrokeColor: '#000000', 
                 currentItemStrokeStyle: 'solid',
                 currentItemStrokeWidth: 1,
                 currentItemBackgroundColor: 'transparent',
                 currentItemFillStyle: 'solid',
                 currentItemFontFamily: 1,
                 currentItemFontSize: 20,
                 currentItemTextAlign: 'left',                 
                 currentItemRoughness: 0,         //Sloppiness
                 currentItemRoundness: 'sharp',   //Edges
                 currentItemOpacity: 100,
                 currentItemEndArrowhead: 'triangle',
                 currentChartType: 'line'
           };
        }
        
        function appStateOpt(){
           return {
              exportBackground: true,
              viewBackgroundColor: '#fff',
              exportWithDarkMode: false,
              exportEmbedScene: true,
           };
        };

       // **************************** BACKEND: EXPORT & SAVE ****************************
        
        //EXPORT Options
        function OptEXPORT(w=0,h=0,s=1){

           const elements = excalidrawAPI.getSceneElements();
           if (!elements || !elements.length) return false;
         
           const files = excalidrawAPI.getFiles();
           
           const appState = {
              ...excalidrawAPI.getAppState(),
              ...appStateDefault(),
              ...appStateOpt()
           };
          
           return {
              elements: elements,
              files:    files,
              appState: appState,
              getDimensions: w==0 ? null : () => { return { width: w, height: h, scale: s } }
           }
        }
        
        //BACKEND:  SAVE SCENE to JSON
        function SAVE(){
 
           const OptExport = OptEXPORT();
           if (!OptExport) return;
 
           const Scene = {
             type:    'excalidraw',
             version: 2,
             source:  location.protocol + '://' + location.hostname,
             ...OptExport
           }
    
           const scene = JSON.stringify(Scene,  null, 2);  
           const url = '<?=$dir?>';
           const data = {do:'save', name:name, mode:'scene', data:scene};
             
                 FETCH(url,data,null); 
           
        }

        //BACKEND:  EXPORT SCENE to PNG
        function EXPORT(){

           const OptExport = OptEXPORT(); 
           if (!OptExport) return;
           
           const OptJPG = { exportPadding: 10, mimeType: 'image/jpeg', quality: 0.85 };
           const OptPNG = { exportPadding: 10, mimeType: 'image/png' };
  
           ExcalidrawLib.exportToBlob( { ...OptExport, ...OptPNG } ) 
           .then( e => {
                const url = '<?=$dir?>';
                const data = {do:'save', name:name, mode:'image', data:e}; 
                       FETCH(url,data,null);
           });
           
        };

              
       // **************************** FETCH ****************************
       
      function FETCH(url,dat,cb){
         let data = new FormData();
         for(var k in dat){data.append(k,dat[k])};
           
         let head = new Headers();
             head.append('Access-Control-Allow-Origin','*')
           
         let options = { method: 'post', headers: head, mode: 'cors', body: data }; 
             fetch(url,options)
            .then(e => e.text()) 
            .then( text => { let s;
                try        { s = JSON.parse(text) }   
                catch(err) { s = '' }                 
                if(cb)cb(s);
             });
      } 


       // **************************** TOOLS ****************************
      
      //Image encode Base64 -> binary Array -> Blob
      function b64ToBlob(b64,ext){
         const byteCharacters = atob(b64);
         const byteNumbers = new Array(byteCharacters.length);
           for (let i = 0; i < byteCharacters.length; i++) {
                  byteNumbers[i] = byteCharacters.charCodeAt(i);
           }
         const byteArray = new Uint8Array(byteNumbers);
         const blob = new Blob([byteArray], {type: 'image/' + ext});
         return blob;
      }
              
              
    </script>


  </body>
</html>
